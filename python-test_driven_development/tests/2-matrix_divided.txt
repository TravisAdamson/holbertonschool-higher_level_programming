# 2-matrix_divided.txt
# Travis Adamson

===================================
Doctesting for 2-matrix_divided.py
===================================

General Purpose of Function:

matrix_divided(...) returns a new matrix with each element divided by the div value provided (uses the / operator).

	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix = [
	... 	[9, 3, 6],
	...		[18, 6, 9]
	...	]
	>>> print(matrix_divided(matrix, 3))
	[[3.0, 1.0, 2.0], [6.0, 2.0, 3.0]]

The values are rounded to 2 decimal points:

	>>> matrix = [
	...		[1, 2, 3],
	...		[4, 5, 6]
	...	]
	>>> print(matrix_divided(matrix, 3))
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

The original matrix is not changed:

	>>> print(matrix)
	[[1, 2, 3], [4, 5, 6]]

The matrix can include float values as well:

	>>> matrix = [
	...		[1.1, 2.2, 3.3],
	...		[4.4, 5.5, 6.6]
	...	]
	>>> print(matrix_divided(matrix, 3))
	[[0.37, 0.73, 1.1], [1.47, 1.83, 2.2]]

The matrix can include float and interger values co-mingled:

	>>> matrix = [
	...		[1.1, 2, 3.3],
	...		[4, 5.5, 6]
	...	]
	>>> print(matrix_divided(matrix, 3))
	[[0.37, 0.67, 1.1], [1.33, 1.83, 2.0]]

Possible Errors:

The matrix cannot be an empty list:

	>>> matrix = []
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

The matrix can accept a list of empty lists:

	>>> matrix = [[]]
	>>> print(matrix_divided(matrix, 3))
	[[]]

An TypeError will be generated if matrix is not a list of lists:

	>>> matrix = [1, 2, 3]
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix = "something else"
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix = None
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Errors will also be raised if any value inside the matrix is not a number:

	>>> matrix = [
	...		[1, 2, 3],
	...		["Four", 5, 6]
	... ]
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix = [
	...		[1, 2, "Three"],
	...		[4, 5, 6]
	...	]
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Possible Divisional Errors:

If div is zero, a ZeroDivisionError is raised:

	>>> matrix = [
	...		[1, 2, 3],
	...		[4, 5, 6]
	...	]
	>>> print(matrix_divided(matrix, 0))
	Traceback (most recent call last):
	ZeroDivisionError: division by zero

If div is not an int or float value, a TypeError is raised:

	>>> print(matrix_divided(matrix, None))
	Traceback (most recent call last):
	TypeError: div must be a number

	>>> print(matrix_divided(matrix, "Other"))
	Traceback (most recent call last):
	TypeError: div must be a number
