# 5-text_indentation.txt
# Travis Adamson

===================================
Doctesting for 5-text_indentation.py
===================================

General Purpose of Function:

To print the given text with 2 new lines inserted after any ".", "?", and ":" character:

	>>> text_indentation = __import__('5-text_indentation').text_indentation
	>>> text_indentation("Print me?")
	Print me?
	<BLANKLINE>

	>>> text_indentation("Print: me")
	Print:
	<BLANKLINE>
	me

	>>> text_indentation("I was printed.")
	I was printed.
	<BLANKLINE>

Any spaces that are before the first character are not printed:

	>>> text_indentation("     Print me?")
	Print me?
	<BLANKLINE>

Spaces at the end of a line are also omitted:

	>>> text_indentation("Print me?      ")
	Print me?
	<BLANKLINE>

	>>> text_indentation("Print me?     And me too?")
	Print me?
	<BLANKLINE>
	And me too?
	<BLANKLINE>

If the given text does not end with the indicated characters no new line will be inserted:

	>>> text_indentation("Print me")
	Print me

If the given string includes it's own new lines they are treated normally:

	>>> text_indentation("Print me\nAnd me?")
	Print me
	And me?
	<BLANKLINE>

	>>> text_indentation("\n\n I made my own blank lines.")
	<BLANKLINE>
	<BLANKLINE>
	I made my own blank lines.
	<BLANKLINE>

Possible Errors:

If the text value is not a string, a TypeError will be raised:

	>>> text_indentation(5)
	Traceback (most recent call last):
	TypeError: text must be a string

If no value is provided for text, a TypeError will also be raised:

	>>> text_indentation(None)
	Traceback (most recent call last):
	TypeError: text must be a string
