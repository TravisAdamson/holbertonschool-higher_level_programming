# 1-my_list.txt
# Travis Adamson

===================================
Doctesting for 1-my_list.py
===================================

General Purpose of Class: MyList

Adds a sorted print method to the existing class: list

Usage examples:

	>>> MyList = __import('1-my_list').MyList
	>>> my_list = MyList()
	>>> type(my_list)
	<class '1-my_list.MyList'>

Printing the empty list:

	>>> print(my_list)
	[]

Creating the object with a single list:

	>>> my_list = MyList([4, 5, 6])
	>>> print(my_list)
	[4, 5, 6]

Because MyList inherits from list, list methods can be used:

	>>> my_list = MyList()
	>>> my_list.append(8)
	>>> my_list.append(1)
	>>> my_list.append(5)
	>>> print(my_list)
	[8, 1, 5]

Edited using an index:

	>>> my_list[0] = 10
	>>> print(my_list)
	[10, 2, 5]

The remove method demonstrated:

	>>> my_list.remove(2)
	>>> print(my_list)
	[10, 5]

Now demonstrating the print_sorted method:

	>>> my_list = MyList()
	>>> print(my_list.print_sorted)
	<bound method MyList.print_sorted of []>

Creating an unsorted list:

	>>> my_list = MyList([1, 8, 4, 2, 16])
	>>> print(my_list)
	[1, 8, 4, 2, 16]

Sorting the list:

	>>> my_list.print_sorted()
	[1, 2, 4, 8, 16]

The original list is not modified:

	>>> print(my_list)
	[1, 8, 4, 2, 16]

Also works with sorting string values:

	>>> my_list = MyList(["Matt", "Travis", "Logan", "Eric"])
	>>> print(my_list)
	['Matt', 'Travis', 'Logan', 'Eric']

Sorted: 

	>>> my_list.print_sorted()
	['Eric', 'Logan', 'Matt', 'Travis']

If the list is empty will print an empty list:

	>>> my_list = MyList()
	>>> my_list.print_sorted()
	[]

Possible Errors:

If more than one argument is given during instantiation a TypeError is raised:

	>>> my_list = MyList([3, 2], [8, 10])
	Traceback (most recent call last):
	TypeError: list() takes at most 1 argument (2 given)

If the argument is not an iterable object a TypeError is raised:

	>>> my_list = MyList(None)
	Traceback (most recent call last):
	TypeError: 'NoneType' object is not iterable

print_sorted will not accept any arguments:

	>>> my_list = MyList([1, 2, 3])
	>>> my_list.print_sorted(anything)
	Traceback (most recent call last):
	TypeError: print_sorted() takes 1 positional argument but 2 were given

If the list has different types, print sorted will raise a TypeError:

	>>> my_list = MyList(["Bob", 10, "David"]
	>>> my_list.print_sorted()
	Traceback (most recent call last):
	TypeError: unorderable types: str() < int()
